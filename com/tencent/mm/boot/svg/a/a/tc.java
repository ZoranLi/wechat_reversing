package com.tencent.mm.boot.svg.a.a;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Join;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.os.Looper;
import com.tencent.mm.svg.WeChatSVGRenderC2Java;
import com.tencent.mm.svg.c;
import com.tencent.smtt.sdk.WebView;

public final class tc extends c {
    private final int height = 476;
    private final int width = 644;

    protected final int b(int i, Object... objArr) {
        switch (i) {
            case 0:
                return 644;
            case 1:
                return 476;
            case 2:
                Canvas canvas = (Canvas) objArr[0];
                Looper looper = (Looper) objArr[1];
                Matrix d = c.d(looper);
                float[] c = c.c(looper);
                Paint g = c.g(looper);
                g.setFlags(385);
                g.setStyle(Style.FILL);
                Paint g2 = c.g(looper);
                g2.setFlags(385);
                g2.setStyle(Style.STROKE);
                g.setColor(WebView.NIGHT_MODE_COLOR);
                g2.setStrokeWidth(1.0f);
                g2.setStrokeCap(Cap.BUTT);
                g2.setStrokeJoin(Join.MITER);
                g2.setStrokeMiter(4.0f);
                g2.setPathEffect(null);
                c.a(g2, looper).setStrokeWidth(1.0f);
                canvas.saveLayerAlpha(null, 12, 4);
                Paint a = c.a(g, looper);
                a.setColor(WebView.NIGHT_MODE_COLOR);
                canvas.save();
                c = c.a(c, 1.0f, 0.0f, 28.0f, 0.0f, 1.0f, 19.0f);
                d.reset();
                d.setValues(c);
                canvas.concat(d);
                canvas.save();
                Paint a2 = c.a(a, looper);
                Path h = c.h(looper);
                h.moveTo(499.3511f, 0.0f);
                h.cubicTo(224.00923f, 0.0f, 0.0f, 224.00923f, 0.0f, 499.3511f);
                h.cubicTo(0.0f, 774.693f, 224.00923f, 998.7022f, 499.3511f, 998.7022f);
                h.cubicTo(774.693f, 998.7022f, 998.7022f, 774.693f, 998.7022f, 499.3511f);
                h.cubicTo(998.7022f, 224.00923f, 774.693f, 0.0f, 499.3511f, 0.0f);
                h.lineTo(499.3511f, 0.0f);
                h.close();
                h.moveTo(508.9496f, 352.38882f);
                h.cubicTo(612.7859f, 351.70734f, 711.75574f, 340.0644f, 793.218f, 319.94598f);
                h.cubicTo(807.2702f, 372.60324f, 815.3137f, 429.83893f, 816.0912f, 489.75262f);
                h.lineTo(508.9496f, 489.75262f);
                h.lineTo(508.9496f, 352.38882f);
                h.lineTo(508.9496f, 352.38882f);
                h.close();
                h.moveTo(508.9496f, 333.1919f);
                h.lineTo(508.9496f, 168.65482f);
                h.cubicTo(580.5062f, 167.97333f, 649.3945f, 159.73784f, 712.658f, 144.56264f);
                h.cubicTo(744.333f, 188.3221f, 770.0665f, 241.70882f, 788.00604f, 301.5649f);
                h.cubicTo(708.3675f, 321.165f, 611.19257f, 332.52f, 508.9496f, 333.1919f);
                h.lineTo(508.9496f, 333.1919f);
                h.close();
                h.moveTo(508.9496f, 149.45787f);
                h.lineTo(508.9496f, 19.561693f);
                h.cubicTo(581.2549f, 22.844372f, 647.5516f, 62.879616f, 699.91125f, 127.89009f);
                h.cubicTo(640.4007f, 141.47194f, 575.88934f, 148.81477f, 508.9496f, 149.45787f);
                h.lineTo(508.9496f, 149.45787f);
                h.close();
                h.moveTo(489.75262f, 149.45787f);
                h.cubicTo(422.82245f, 148.81477f, 358.3111f, 141.47194f, 298.80054f, 127.89009f);
                h.cubicTo(351.16025f, 62.879616f, 417.4569f, 22.844372f, 489.75262f, 19.561693f);
                h.lineTo(489.75262f, 149.45787f);
                h.lineTo(489.75262f, 149.45787f);
                h.close();
                h.moveTo(489.75262f, 168.65482f);
                h.lineTo(489.75262f, 333.1919f);
                h.cubicTo(387.51926f, 332.52f, 290.3443f, 321.165f, 210.70573f, 301.5649f);
                h.cubicTo(228.6453f, 241.70882f, 254.3788f, 188.3221f, 286.05377f, 144.56264f);
                h.cubicTo(349.30774f, 159.73784f, 418.2056f, 167.97333f, 489.75262f, 168.65482f);
                h.lineTo(489.75262f, 168.65482f);
                h.close();
                h.moveTo(489.75262f, 352.38882f);
                h.lineTo(489.75262f, 489.75262f);
                h.lineTo(182.611f, 489.75262f);
                h.cubicTo(183.39807f, 429.83893f, 191.4416f, 372.60324f, 205.49376f, 319.94598f);
                h.cubicTo(286.95602f, 340.0644f, 385.91632f, 351.70734f, 489.75262f, 352.38882f);
                h.lineTo(489.75262f, 352.38882f);
                h.close();
                h.moveTo(163.42365f, 489.75262f);
                h.lineTo(19.446512f, 489.75262f);
                h.cubicTo(20.991867f, 411.40985f, 41.29264f, 337.5976f, 76.1927f, 272.7023f);
                h.cubicTo(106.10155f, 289.08688f, 143.71797f, 303.37903f, 187.0551f, 315.16595f);
                h.cubicTo(172.5134f, 369.37814f, 164.21072f, 428.20718f, 163.42365f, 489.75262f);
                h.lineTo(163.42365f, 489.75262f);
                h.close();
                h.moveTo(163.42365f, 508.9496f);
                h.cubicTo(164.20113f, 570.0055f, 172.38863f, 628.3834f, 186.70955f, 682.23083f);
                h.cubicTo(143.24765f, 694.0754f, 105.54484f, 708.4347f, 75.62639f, 724.89606f);
                h.cubicTo(41.091076f, 660.26953f, 20.982267f, 586.8508f, 19.446512f, 508.9496f);
                h.lineTo(163.42365f, 508.9496f);
                h.lineTo(163.42365f, 508.9496f);
                h.close();
                h.moveTo(182.611f, 508.9496f);
                h.lineTo(489.75262f, 508.9496f);
                h.lineTo(489.75262f, 644.912f);
                h.cubicTo(385.78192f, 645.59344f, 286.67767f, 657.27484f, 205.14822f, 677.4412f);
                h.cubicTo(191.30722f, 625.14874f, 183.38847f, 568.3737f, 182.611f, 508.9496f);
                h.lineTo(182.611f, 508.9496f);
                h.close();
                h.moveTo(489.75262f, 664.10895f);
                h.lineTo(489.75262f, 828.646f);
                h.cubicTo(417.89844f, 829.3275f, 348.72223f, 837.6302f, 285.21872f, 852.93976f);
                h.cubicTo(253.70691f, 809.0843f, 228.10777f, 755.6784f, 210.3122f, 695.8223f);
                h.cubicTo(290.02753f, 676.1646f, 387.35608f, 664.7808f, 489.75262f, 664.10895f);
                h.lineTo(489.75262f, 664.10895f);
                h.close();
                h.moveTo(489.75262f, 847.84296f);
                h.lineTo(489.75262f, 979.1309f);
                h.cubicTo(417.01538f, 975.82904f, 350.33478f, 935.35223f, 297.83112f, 869.6411f);
                h.cubicTo(357.62f, 855.9153f, 422.46732f, 848.49567f, 489.75262f, 847.84296f);
                h.lineTo(489.75262f, 847.84296f);
                h.close();
                h.moveTo(508.9496f, 847.84296f);
                h.cubicTo(576.2445f, 848.49567f, 641.0822f, 855.92487f, 700.8711f, 869.6507f);
                h.cubicTo(648.36743f, 935.3619f, 581.6868f, 975.82904f, 508.9496f, 979.1309f);
                h.lineTo(508.9496f, 847.84296f);
                h.lineTo(508.9496f, 847.84296f);
                h.close();
                h.moveTo(508.9496f, 828.6556f);
                h.lineTo(508.9496f, 664.10895f);
                h.cubicTo(611.3557f, 664.7808f, 708.68427f, 676.1742f, 788.39f, 695.8415f);
                h.cubicTo(770.5944f, 755.688f, 744.9953f, 809.09393f, 713.4835f, 852.94934f);
                h.cubicTo(649.98956f, 837.6398f, 580.8038f, 829.3371f, 508.9496f, 828.6556f);
                h.lineTo(508.9496f, 828.6556f);
                h.close();
                h.moveTo(508.9496f, 644.912f);
                h.lineTo(508.9496f, 508.9496f);
                h.lineTo(816.0912f, 508.9496f);
                h.cubicTo(815.3137f, 568.3737f, 807.39496f, 625.1583f, 793.55396f, 677.4508f);
                h.cubicTo(712.0341f, 657.27484f, 612.9299f, 645.59344f, 508.9496f, 644.912f);
                h.lineTo(508.9496f, 644.912f);
                h.close();
                h.moveTo(835.28815f, 508.9496f);
                h.lineTo(979.2557f, 508.9496f);
                h.cubicTo(977.7199f, 586.8604f, 957.61115f, 660.2791f, 923.0662f, 724.92487f);
                h.cubicTo(893.15735f, 708.4539f, 855.4545f, 694.08496f, 812.00226f, 682.2405f);
                h.cubicTo(826.3232f, 628.393f, 834.5011f, 570.0055f, 835.28815f, 508.9496f);
                h.lineTo(835.28815f, 508.9496f);
                h.close();
                h.moveTo(835.28815f, 489.75262f);
                h.cubicTo(834.5011f, 428.20718f, 826.1888f, 369.38773f, 811.6567f, 315.17554f);
                h.cubicTo(854.99384f, 303.3886f, 892.6102f, 289.0965f, 922.5095f, 272.71188f);
                h.cubicTo(957.40955f, 337.60718f, 977.7103f, 411.41946f, 979.2557f, 489.75262f);
                h.lineTo(835.28815f, 489.75262f);
                h.lineTo(835.28815f, 489.75262f);
                h.close();
                h.moveTo(913.0358f, 256.02014f);
                h.cubicTo(884.34595f, 271.72324f, 848.1789f, 285.43948f, 806.4447f, 296.78488f);
                h.cubicTo(788.6492f, 237.47589f, 763.3092f, 184.26193f, 732.2197f, 139.7922f);
                h.cubicTo(753.4324f, 134.1195f, 773.8579f, 127.554146f, 793.5348f, 120.278496f);
                h.cubicTo(841.4024f, 157.51099f, 882.0615f, 203.56447f, 913.0358f, 256.02014f);
                h.lineTo(913.0358f, 256.02014f);
                h.close();
                h.moveTo(774.87537f, 106.46629f);
                h.cubicTo(757.15656f, 112.62852f, 738.8907f, 118.22443f, 719.94324f, 123.09085f);
                h.cubicTo(691.65656f, 86.43427f, 659.2329f, 56.707794f, 623.8433f, 35.658337f);
                h.cubicTo(678.6698f, 50.392f, 729.60895f, 74.63775f, 774.87537f, 106.46629f);
                h.lineTo(774.87537f, 106.46629f);
                h.close();
                h.moveTo(278.75894f, 123.08125f);
                h.cubicTo(259.82114f, 118.21483f, 241.55524f, 112.61891f, 223.83646f, 106.46629f);
                h.cubicTo(269.10287f, 74.62815f, 320.04196f, 50.392f, 374.86847f, 35.658337f);
                h.cubicTo(339.47888f, 56.707794f, 307.05524f, 86.43427f, 278.75894f, 123.08125f);
                h.lineTo(278.75894f, 123.08125f);
                h.close();
                h.moveTo(205.17702f, 120.2689f);
                h.cubicTo(224.8443f, 127.554146f, 245.26985f, 134.1195f, 266.48248f, 139.8018f);
                h.cubicTo(235.40262f, 184.26193f, 210.06264f, 237.47589f, 192.26706f, 296.78488f);
                h.cubicTo(150.5329f, 285.43948f, 114.36584f, 271.72324f, 85.675995f, 256.01053f);
                h.cubicTo(116.650276f, 203.55487f, 157.30942f, 157.51099f, 205.17702f, 120.2689f);
                h.lineTo(205.17702f, 120.2689f);
                h.close();
                h.moveTo(85.06169f, 741.61664f);
                h.cubicTo(113.75153f, 725.8175f, 150.00497f, 712.02454f, 191.87354f, 700.6215f);
                h.cubicTo(209.52513f, 759.9401f, 234.72113f, 813.19244f, 265.6666f, 857.7486f);
                h.cubicTo(244.31f, 863.48846f, 223.72127f, 870.0922f, 203.93881f, 877.4542f);
                h.cubicTo(156.28238f, 840.1354f, 115.844f, 794.0627f, 85.06169f, 741.61664f);
                h.lineTo(85.06169f, 741.61664f);
                h.close();
                h.moveTo(222.51186f, 891.28564f);
                h.cubicTo(240.35542f, 885.04663f, 258.7557f, 879.3643f, 277.84708f, 874.4307f);
                h.cubicTo(306.34494f, 911.6344f, 339.09494f, 941.76404f, 374.86847f, 963.0439f);
                h.cubicTo(319.50446f, 948.1662f, 268.1046f, 923.58453f, 222.51186f, 891.28564f);
                h.lineTo(222.51186f, 891.28564f);
                h.close();
                h.moveTo(720.8551f, 874.4403f);
                h.cubicTo(739.9465f, 879.37396f, 758.33716f, 885.0563f, 776.1807f, 891.3049f);
                h.cubicTo(730.58795f, 923.5941f, 679.19775f, 948.1662f, 623.8433f, 963.0439f);
                h.cubicTo(659.6168f, 941.76404f, 692.35724f, 911.64404f, 720.8551f, 874.4403f);
                h.lineTo(720.8551f, 874.4403f);
                h.close();
                h.moveTo(794.7538f, 877.46387f);
                h.cubicTo(774.9713f, 870.1018f, 754.38257f, 863.49805f, 733.0356f, 857.7582f);
                h.cubicTo(763.9811f, 813.202f, 789.17706f, 759.9497f, 806.83826f, 700.6311f);
                h.cubicTo(848.6972f, 712.0437f, 884.94104f, 725.83673f, 913.6405f, 741.6358f);
                h.cubicTo(882.8486f, 794.0819f, 842.4102f, 840.1546f, 794.7538f, 877.46387f);
                h.lineTo(794.7538f, 877.46387f);
                h.close();
                WeChatSVGRenderC2Java.setFillType(h, 2);
                canvas.drawPath(h, a2);
                canvas.restore();
                canvas.restore();
                canvas.restore();
                c.f(looper);
                break;
        }
        return 0;
    }
}
