package com.tencent.mapsdk.rastercore;

import java.util.Locale;

public final class c {
    private static double[] a;
    private static double[] b;
    private static boolean c = false;
    private static boolean d = "CN".equals(Locale.getDefault().getCountry());
    private static String e;

    static {
        String str = "124.370000,40.090000:126.910000,41.300:128.160000,41.380000:128.060000,42.000000:129.710000,42.440000:129.910000,43.010000:130.600000,42.420000:130.810000,42.420000:131.310000,43.390000:131.150000,44.840000:131.860000,45.050000:133.320000,45.030000:135.340000,48.670000:131.790000,48.290000:130.670000,48.860000:128.10000,50.0000:126.100000,52.760000:123.380000,53.530000:120.860000,53.280000:120.030000,52.770000:120.780000,52.110000:119.210000,50.020000:117.870000,49.520000:116.710000,49.830000:115.590000,47.920000:117.370000,47.650000:118.540000,47.990000:119.900000,46.680000:117.420000,46.580000:113.640000,44.750000:111.980000,45.090000:111.420000,44.380000:111.960000,43.690000:110.440000,42.780000:107.470000,42.470000:105.010000,41.580000:100.840000,42.680000:96.380000,42.730000:95.420000,44.290000:90.900000,45.250000:91.020000,46.600000:90.070000,47.890000:88.650000,48.180000:87.840000,49.170000:87.350000,49.090000:85.760000,48.390000:85.530000,47.060000:83.040000,47.210000:82.320000,45.570000:82.560000,45.130000:79.870000,44.900000:80.520000,44.730000:80.820000,43.160000:80.380000,43.030000:80.230000,42.200000:78.080000,41.040000:76.870000,41.010000:76.350000,40.350000:74.860000,40.520000:73.660000,39.450000:73.820000,38.610000:74.860000,38.470000:74.920000,37.240000:74.570000,37.030000:74.820000,37.020000:75.860000,36.660000:76.170000,35.820000:77.820000,35.500000:78.080000,35.450000:79.530000,32.750000:78.400000,32.550000:78.770000,31.310000:81.030000,30.200000:82.100000,30.340000:86.010000,27.880000:88.140000,27.870000:88.830000,28.010000:88.920000,27.320000:89.590000,28.140000:90.470000,28.070000:91.660000,27.760000:92.040000,26.600000:93.540000,26.800000:94.650000,27.330000:96.400000,28.00000:97.100000,27.60000:97.550000,27.820000:97.550000,28.220000:97.810000,28.340000:98.400000,27.540000:98.780000,26.640000:98.220000,25.860000:97.550000,24.940000:97.540000,23.940000:98.890000,24.160000:98.930000,23.190000:99.570000,22.940000:99.160000,22.160000:99.960000,22.050000:100.210000,21.430000:101.150000,21.570000:101.450000,21.070:101.790000,21.140000:101.570000,22.210000:102.140000,22.400000:102.480000,22.770000:103.960000,22.500000:105.350000,23.330000:105.580000,23.060000:106.710000,22.860000:106.690000,22.030000:107.990000,21.540000:107.490036,19.305984:109.748489,14.674666:110.039063,11.480025:107.666016,6.271618:111.752930,3.281824:112.939454,3.413421:115.018257,6.054474:118.674316,10.790140:119.164223,12.212996:119.707031,18.020528:121.959229,21.677848:122.699226,23.809795:127.303391,24.447079:127.390663,31.568056:124.335754,32.823666";
        e = str;
        a(str);
    }

    public static void a(String str) {
        String[] split = str.split(":");
        if (split != null) {
            a = new double[split.length];
            b = new double[split.length];
            int i = 0;
            for (String split2 : split) {
                String[] split3 = split2.split(",");
                a[i] = (Double.parseDouble(split3[0]) * 2.003750834E7d) / 180.0d;
                b[i] = ((Math.log(Math.tan(((90.0d + Double.parseDouble(split3[1])) * 3.141592653589793d) / 360.0d)) / 0.017453292519943295d) * 2.003750834E7d) / 180.0d;
                i++;
            }
        }
    }

    public static void a(boolean z) {
        d = z;
    }

    public static boolean a() {
        return !d && c;
    }

    public static boolean a(double d, double d2) {
        int length = b.length - 1;
        boolean z = false;
        int i = 0;
        while (i < b.length) {
            boolean z2;
            if (((b[i] >= d2 || b[length] < d2) && (b[length] >= d2 || b[i] < d2)) || (a[i] > d && a[length] > d)) {
                z2 = z;
            } else {
                z2 = z ^ (((a[length] - a[i]) * ((d2 - b[i]) / (b[length] - b[i]))) + a[i] < d ? 1 : 0);
            }
            z = z2;
            length = i;
            i++;
        }
        return z;
    }

    public static void b(double d, double d2) {
        c = !a((d * 2.003750834E7d) / 180.0d, ((Math.log(Math.tan(((90.0d + d2) * 3.141592653589793d) / 360.0d)) / 0.017453292519943295d) * 2.003750834E7d) / 180.0d);
    }
}
